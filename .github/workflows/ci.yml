name: CI Playwright E2E Suite

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

# Global environment variables
env:
  NODE_VERSION: lts/*

jobs:
  # ============================================================================
  # PARALLEL VALIDATION JOBS (run independently)
  # ============================================================================

  lint:
    name: ESLint & TypeScript Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check

  validate-branch-name:
    name: Branch Naming Convention
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate branch name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"

          # Branch naming patterns
          FEATURE_PATTERN="^feature/"
          BUGFIX_PATTERN="^bugfix/"
          HOTFIX_PATTERN="^hotfix/"

          echo "üîç Validating branch name: $BRANCH_NAME"

          if [[ $BRANCH_NAME =~ $FEATURE_PATTERN ]] || \
             [[ $BRANCH_NAME =~ $BUGFIX_PATTERN ]] || \
             [[ $BRANCH_NAME =~ $HOTFIX_PATTERN ]]; then
            echo "‚úÖ Branch name follows convention"
            exit 0
          else
            echo "‚ùå Branch name does not follow convention"
            echo "Expected patterns:"
            echo "  - feature/description (e.g., feature/login-automation)"
            echo "  - bugfix/description (e.g., bugfix/login-error-handling)"
            echo "  - hotfix/description (e.g., hotfix/critical-login-fix)"
            exit 1
          fi

  validate-console:
    name: Console Clean Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate console output
        run: npm run validate:console

  validate-locators:
    name: Locator Duplicate Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate locators for duplicates
        run: npm run validate:locators

  validate-naming:
    name: Naming Convention Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate naming conventions
        run: npm run validate:naming

  # ============================================================================
  # DEPENDENT JOBS (require lint to pass first)
  # ============================================================================

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run tests with coverage
        run: npm run ci:coverage

      - name: Analyze coverage results
        run: |
          # Check if coverage report exists
          if [ -f "test-results/coverage.json" ]; then
            echo "üìä Coverage report found"
            
            # Extract coverage percentage (simplified - you might need to adjust based on actual report format)
            COVERAGE_PERCENTAGE=$(node -e "
              try {
                const coverage = require('./test-results/coverage.json');
                const totalCoverage = coverage.total || coverage.summary?.total || 0;
                console.log(Math.round(totalCoverage * 100));
              } catch (e) {
                console.log('0');
              }
            ")
            
            echo "üìà Current coverage: ${COVERAGE_PERCENTAGE}%"
            
            # Minimum coverage threshold (80%)
            MIN_COVERAGE=80
            
            if [ "$COVERAGE_PERCENTAGE" -ge "$MIN_COVERAGE" ]; then
              echo "‚úÖ Coverage threshold met (${COVERAGE_PERCENTAGE}% >= ${MIN_COVERAGE}%)"
              exit 0
            else
              echo "‚ùå Coverage threshold not met (${COVERAGE_PERCENTAGE}% < ${MIN_COVERAGE}%)"
              exit 1
            fi
          else
            echo "‚ùå No coverage report found"
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: test-results/
          retention-days: 30

  playwright-tests:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3]
        shardTotal: [3]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.shardIndex }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # ============================================================================
  # POST-PROCESSING JOBS (run after all tests complete)
  # ============================================================================

  merge-test-results:
    name: Merge Test Results
    runs-on: ubuntu-latest
    needs: playwright-tests
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: playwright-report/
          pattern: playwright-report-*
          merge-multiple: true

      - name: Upload merged test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ============================================================================
  # FINAL NOTIFICATION JOB (runs after all jobs complete)
  # ============================================================================

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        validate-branch-name,
        validate-console,
        validate-locators,
        validate-naming,
        test-coverage,
        playwright-tests,
        merge-test-results,
      ]
    if: github.event_name == 'pull_request' && always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate notification
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            const failedJobs = Object.entries(jobs).filter(([jobName, result]) => result === 'failure');
            const cancelledJobs = Object.entries(jobs).filter(([jobName, result]) => result === 'cancelled');

            let body = '';
            let status = '‚úÖ';

            if (failedJobs.length > 0 || cancelledJobs.length > 0) {
              status = '‚ùå';
              body = '## CI Playwright E2E Suite - Failed\n\n';
              
              if (failedJobs.length > 0) {
                body += '### Failed Jobs:\n';
                failedJobs.forEach(([jobName]) => {
                  body += `- ‚ùå ${jobName}\n`;
                });
                body += '\n';
              }
              
              if (cancelledJobs.length > 0) {
                body += '### Cancelled Jobs:\n';
                cancelledJobs.forEach(([jobName]) => {
                  body += `- ‚èπÔ∏è ${jobName}\n`;
                });
                body += '\n';
              }
              
              body += 'Please review the failed jobs and fix the issues before merging.';
            } else {
              body = '## CI Playwright E2E Suite - Passed ‚úÖ\n\n';
              body += 'All validation jobs completed successfully:\n\n';
              body += '- ‚úÖ ESLint & TypeScript Validation\n';
              body += '- ‚úÖ Branch Naming Convention\n';
              body += '- ‚úÖ Console Clean Validation\n';
              body += '- ‚úÖ Locator Duplicate Validation\n';
              body += '- ‚úÖ Naming Convention Validation\n';
              body += '- ‚úÖ Test Coverage Analysis\n';
              body += '- ‚úÖ Playwright E2E Tests\n';
              body += '- ‚úÖ Test Results Merged\n\n';
              body += 'üéâ Your code is ready for review and merge!';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
